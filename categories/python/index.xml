<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Python on Jaejin's blog</title><link>https://jaejin0me.github.io/categories/python/</link><description>Recent content in Python on Jaejin's blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><copyright>Jaejin Jang</copyright><lastBuildDate>Sun, 24 Jul 2022 17:15:52 +0900</lastBuildDate><atom:link href="https://jaejin0me.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>장고+부트스트랩 파이썬 웹 개발의 정석 - 5</title><link>https://jaejin0me.github.io/post/20220724_2/</link><pubDate>Sun, 24 Jul 2022 17:15:52 +0900</pubDate><guid>https://jaejin0me.github.io/post/20220724_2/</guid><description>&lt;p>&lt;em>FitYourEarPlug 개발을 위해 공부한 책 내용 정리입니다.
제가 모르는 부분만 적었어요.&lt;/em>&lt;/p>
&lt;h2 id="18장-기타-편의-기능-구현하기">18장. 기타 편의 기능 구현하기&lt;/h2>
&lt;h2 id="19장-대문-페이지와-자기소개-페이지-완성하기">19장. 대문 페이지와 자기소개 페이지 완성하기&lt;/h2>
&lt;h2 id="20장-도커로-이사-준비하기">20장. 도커로 이사 준비하기&lt;/h2>
&lt;ul>
&lt;li>도커: 문서프로그램의 &amp;ldquo;폰트 포함 저장&amp;rdquo; 기능과 유사(= 의존성 있는 파일들을 포함하여 다른 환경에서 실행가능)&lt;/li>
&lt;/ul>
&lt;h2 id="21장-amazone-lightsail에-배포하기">21장. Amazone Lightsail에 배포하기&lt;/h2>
&lt;ul>
&lt;li>let&amp;rsquo;s encrypt 인증서 발행 시, 방화벽에 80포트를 허용해놔야 하고 웹서버(nginx)를 up 시킨상태로 진행해야 함.&lt;/li>
&lt;/ul>
&lt;h2 id="22장-도메인-연결하기">22장. 도메인 연결하기&lt;/h2>
&lt;hr>
&lt;p>끝.&lt;/p></description></item><item><title>Package libffi was not found in the pkg-config search path</title><link>https://jaejin0me.github.io/post/20220704_2/</link><pubDate>Mon, 04 Jul 2022 23:30:52 +0900</pubDate><guid>https://jaejin0me.github.io/post/20220704_2/</guid><description>&lt;h2 id="package-libffi-was-not-found-in-the-pkg-config-search-path">Package libffi was not found in the pkg-config search path&lt;/h2>
&lt;ul>
&lt;li>본인 개발 환경에서는 docker-compose build시 아무런 문제가 없는데, 막상 가상서버에서 docker-compose build를 하면 cffi 빌드 문제가 발생하는 경우가 있습니다.&lt;/li>
&lt;li>에러 메시지는 아래와 같습니다.&lt;/li>
&lt;/ul>
&lt;h2 id="debug-log">debug log&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#11 10.05 Building wheels for collected packages: cffi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#11 10.05 Building wheel for cffi (setup.py): started&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#11 10.05 Building wheel for cffi (setup.py): finished with status &amp;#39;error&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#11 10.05 ERROR: Command errored out with exit status 1:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#11 10.05 command: /usr/local/bin/python -u -c &amp;#39;import sys, setuptools, tokenize; sys.argv[0] = &amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;/tmp/pip-install-lt5a4gm7/cffi_f02ff5d2648d42c398bfaa5f9587d9a1/setup.py&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;; __file__=&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;/tmp/pip-install-lt5a4gm7/cffi_f02ff5d2648d42c398bfaa5f9587d9a1/setup.py&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;;f=getattr(tokenize, &amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;open&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;, open)(__file__);code=f.read().replace(&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;\r\n&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;, &amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;\n&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;);f.close();exec(compile(code, __file__, &amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;exec&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;))&amp;#39; bdist_wheel -d /tmp/pip-wheel-m5z8su85&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#11 10.05 cwd: /tmp/pip-install-lt5a4gm7/cffi_f02ff5d2648d42c398bfaa5f9587d9a1/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#11 10.05 Complete output (58 lines):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#11 10.05 Package libffi was not found in the pkg-config search path.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#11 10.05 Perhaps you should add the directory containing `libffi.pc&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#11 10.05 to the PKG_CONFIG_PATH environment variable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#11 10.05 Package &amp;#39;libffi&amp;#39;, required by &amp;#39;virtual:world&amp;#39;, not found&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#11 10.05 Package libffi was not found in the pkg-config search path.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#11 10.05 Perhaps you should add the directory containing `libffi.pc&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="해결">해결&lt;/h2>
&lt;ul>
&lt;li>가상 서버에는 libffi-dev가 설치되어 있지 않아서 그렇습니다.&lt;/li>
&lt;li>Dockerfile 패키지 설치작업에 libffi-dev 를 추가하면 해결됩니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">RUN&lt;/span> apk add postgresql-dev gcc python3-dev musl-dev zlib-dev jpeg-dev libffi-dev&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>pkg-resources==0.0.0 not found 해결하기</title><link>https://jaejin0me.github.io/post/20220704/</link><pubDate>Mon, 04 Jul 2022 23:03:52 +0900</pubDate><guid>https://jaejin0me.github.io/post/20220704/</guid><description>&lt;h2 id="pkg-resources000">pkg-resources==0.0.0&lt;/h2>
&lt;ul>
&lt;li>파이썬 패키지 관리를 위해 freeze를 이용하여 requirements.txt를 만들고 이 파일을 이용해 패키지를 설치하다 보면 만나게 되는 이슈입니다.&lt;/li>
&lt;li>보통 아래와 같은 명령어 실행중에 만나게 되겠죠?&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ pip freeze &amp;gt; requirements.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ pip install -r requirements.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="debug-log">debug log&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Could not find a version that satisfies the requirement pkg-resources==0.0.0 (from -r requirements.txt (line 24)) (from versions: )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">No matching distribution found for pkg-resources==0.0.0 (from -r requirements.txt (line 24))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="해결">해결&lt;/h2>
&lt;ul>
&lt;li>원인을 찾아보고자 pkg-resources==0.0.0 의 용도가 무엇인지 찾아봤는데, 그냥 버그라네요;; &lt;a href="https://askubuntu.com/questions/854249/pkg-resources-0-0-0-in-pip-freeze-bug">askubuntu 링크&lt;/a>&lt;/li>
&lt;li>무튼 그냥 패키지에서 제거하셔도 무방합니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ pip uninstall pkg-resources&lt;span class="o">==&lt;/span>0.0.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>장고+부트스트랩 파이썬 웹 개발의 정석 - 4</title><link>https://jaejin0me.github.io/post/20220626/</link><pubDate>Sun, 26 Jun 2022 13:03:52 +0900</pubDate><guid>https://jaejin0me.github.io/post/20220626/</guid><description>&lt;p>&lt;em>FitYourEarPlug 개발을 위해 공부한 책 내용 정리입니다.
제가 모르는 부분만 적었어요.&lt;/em>&lt;/p>
&lt;h2 id="11장-다대다-관계-구현하기">11장. 다대다 관계 구현하기&lt;/h2>
&lt;ul>
&lt;li>ManyToManyField를 사용한다. 기본적으로 null=Ture가 설정되어 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="15장-폼으로-포스트-작성과-수정기능-구현하기">15장. 폼으로 포스트 작성과 수정기능 구현하기&lt;/h2>
&lt;ul>
&lt;li>웹 개발에서는 입력 빈 칸을 폼(form)이라고 한다.&lt;/li>
&lt;li>CreateView을 사용하면 xxx_form.html 템플릿을 찾는다.&lt;/li>
&lt;li>장고는 &lt;!-- raw HTML omitted --> 태그의 action 속성(입력한 데이터를 전송할 url 설정)을 설정하지 않아도 알아서 처리해 준다.&lt;/li>
&lt;li>로그인안 사용자에게만 허용하려면 LoginRequiredMixin 클래스 사용&lt;/li>
&lt;li>UserPassesTestMixin 클래스를 사용하여 유저의 속성을 확인하는 메소드를 사용할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="16장-외부-라이브러리를-블로그에-활용하기">16장. 외부 라이브러리를 블로그에 활용하기&lt;/h2>
&lt;ul>
&lt;li>django-xxx 형태의 패키지를 찾아서 사용하면됨&lt;/li>
&lt;/ul>
&lt;h2 id="17장-폼으로-댓글-기능-구현하기">17장. 폼으로 댓글 기능 구현하기&lt;/h2>
&lt;ul>
&lt;li>url 뒤에 #comment-1 과 같이 표기하면 해당 id의 요소로 바로 링크 가능&lt;/li>
&lt;/ul></description></item><item><title>장고+부트스트랩 파이썬 웹 개발의 정석 - 3</title><link>https://jaejin0me.github.io/post/20220618/</link><pubDate>Sat, 18 Jun 2022 00:03:52 +0900</pubDate><guid>https://jaejin0me.github.io/post/20220618/</guid><description>&lt;p>&lt;em>FitYourEarPlug 개발을 위해 공부한 책 내용 정리입니다.
제가 모르는 부분만 적었어요.&lt;/em>&lt;/p>
&lt;h2 id="11장-테스트-주도-개발-적용하기">11장. 테스트 주도 개발 적용하기&lt;/h2>
&lt;h2 id="12장-템플릿-모듈화하기">12장. 템플릿 모듈화하기&lt;/h2>
&lt;h2 id="13장-다대일-관계-구현하기">13장. 다대일 관계 구현하기&lt;/h2>
&lt;ul>
&lt;li>SlugField 사람이 읽을 수 있는 텍스트로 고유 URL을 만들고 싶을 때 사용한다.&lt;/li>
&lt;li>ForeignKey로 연결되어 있는 레코드를 불러 올 수 있다. 모델명을 소문자로 쓰고 뒤에 _set을 붙이는게 기본 설정이다.&lt;/li>
&lt;/ul></description></item><item><title>장고+부트스트랩 파이썬 웹 개발의 정석 - 2</title><link>https://jaejin0me.github.io/post/20220611_1/</link><pubDate>Sat, 11 Jun 2022 12:03:52 +0900</pubDate><guid>https://jaejin0me.github.io/post/20220611_1/</guid><description>&lt;p>&lt;em>FitYourEarPlug 개발을 위해 공부한 책 내용 정리입니다.
제가 모르는 부분만 적었어요.&lt;/em>&lt;/p>
&lt;h2 id="8장-웹-페이지-만들기">8장. 웹 페이지 만들기&lt;/h2>
&lt;h2 id="9장-정적-파일과-미디어-파일-관리하기">9장. 정적 파일과 미디어 파일 관리하기&lt;/h2>
&lt;h2 id="10장-페이지-구성-개선하기">10장. 페이지 구성 개선하기&lt;/h2>
&lt;ul>
&lt;li>장고의 모델을 만들면 기본적으로 pk 필드가 만들어 진다.&lt;/li>
&lt;li>일반적인 기능 개발이라면 CBV 방식을 추천한다.&lt;/li>
&lt;li>ListView는 모델명 뒤에 &amp;lsquo;_list&amp;rsquo;가 붙은 html 파일을 기본 템플릿으로 사용한다.&lt;/li>
&lt;li>장고 templates 폴더의 html 파일은 정적인 파일이 아니다.&lt;/li>
&lt;li>Pillow: 파이썬 이미지 처리 라이브러리&lt;/li>
&lt;/ul></description></item><item><title>장고+부트스트랩 파이썬 웹 개발의 정석 - 1</title><link>https://jaejin0me.github.io/post/20220610_1/</link><pubDate>Fri, 10 Jun 2022 16:39:52 +0900</pubDate><guid>https://jaejin0me.github.io/post/20220610_1/</guid><description>&lt;p>&lt;em>FitYourEarPlug 개발을 위해 공부한 책 내용 정리입니다.
제가 모르는 부분만 적었어요.&lt;/em>&lt;/p>
&lt;h2 id="1장-왜-이-책을-읽어야-하나요">1장. 왜 이 책을 읽어야 하나요?&lt;/h2>
&lt;h2 id="2장-웹-개발-준비하기">2장. 웹 개발 준비하기&lt;/h2>
&lt;h2 id="3장-웹-프런트엔드-기초-다지기">3장. 웹 프런트엔드 기초 다지기&lt;/h2>
&lt;h2 id="4장-부트스트랩-적용하기">4장. 부트스트랩 적용하기&lt;/h2>
&lt;h2 id="5장-장고의-역할-이해하기">5장. 장고의 역할 이해하기&lt;/h2>
&lt;h2 id="6장-장고-프로젝트-만들기">6장. 장고 프로젝트 만들기&lt;/h2>
&lt;h2 id="7장-장고-프로젝트에서-앱-개발하기">7장. 장고 프로젝트에서 앱 개발하기&lt;/h2>
&lt;ul>
&lt;li>HTML
&lt;ul>
&lt;li>html에서 사용하는 기능은 태그를 의미하고 속성은 태그안의 속성을 의미.&lt;/li>
&lt;li>스타일은 태그 개별로 속성을 설정할 수도 있고, 태그 자체에 설정할 수도 있음.&lt;/li>
&lt;li>하나의 웹사이트를 만드는 경우 일관된 디자인을 적용할 텐데 하나의 html 파일 내에서는 태그에 스타일을 설정하면 되지만 파일이 여러개인
경우는 스타일을 복사, 붙여넣기 해가며 관리하는 것은 비효율적이다. 그래서 CSS를 사용한다. CSS는 웹 문선의 디자인을 구현하기 위한 언어이다. CSS 하나만 관리하면 웹사이트 전체 디자인을 제어할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;hr/&amp;gt; - 수평선 태그
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;span&amp;gt; - 별 기능 없음, div와 비슷
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>부트스트랩
&lt;ul>
&lt;li>웹 개발에 사용되는 구성요소들을 미리 디자인 해놓은 툴킷&lt;/li>
&lt;li>템플릿을 다운 받은 후 index.html 등의 소스코드를 복사하여 필요한 기능을 가져다 쓰면 된다.&lt;/li>
&lt;li>다양한 컴포넌트 등을 검색하하여 복붙해서 쓰면 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CDN(Contents Delivery Network)&lt;/li>
&lt;/ul>
&lt;h1 id="장고">장고&lt;/h1>
&lt;ul>
&lt;li>동작 구조 (출처 &lt;a href="https://lazy-cloud.tistory.com/95">https://lazy-cloud.tistory.com/95&lt;/a>)
&lt;img loading="lazy" src="https://t1.daumcdn.net/cfile/tistory/991057335AB90C933A" alt="장고의 동작 구조" />
&lt;/li>
&lt;li>MTV(Model, Template, View) 패턴&lt;/li>
&lt;li>대문 페이지 = Landing Page&lt;/li>
&lt;li>모델 변경하면 Migration 해줘야함&lt;/li>
&lt;/ul></description></item><item><title>파이썬으로 쿠팡 파트너스 API 활용하기 - 3 네이버 블로그 API로 글올리기</title><link>https://jaejin0me.github.io/post/20200202/</link><pubDate>Sun, 02 Feb 2020 07:12:52 +0900</pubDate><guid>https://jaejin0me.github.io/post/20200202/</guid><description>&lt;p>이력&lt;/p>
&lt;ul>
&lt;li>2020.02.02 포스팅&lt;/li>
&lt;/ul>
&lt;p>&lt;em>안녕하세요.&lt;br>
많이 늦었죠? ㅎㅎ, 쓰기가 너무 귀찮아요..ㅋㅋ&lt;br>
사실 요즘에는 쿠팡 상품도 안올리고 있어요. 귀찬쓰..&lt;br>
아무튼 오늘도 시작하겠습니다. 과정이 길게 느껴질수도 있는데,&lt;br>
어렵지는 않아요. 하나하나 따라 하시면 금방하실 수 있어요.&lt;/em>&lt;/p></description></item><item><title>파이썬으로 쿠팡 파트너스 API 활용하기 - 2 상품 이미지 가져오기</title><link>https://jaejin0me.github.io/post/20200101/</link><pubDate>Wed, 01 Jan 2020 07:12:52 +0900</pubDate><guid>https://jaejin0me.github.io/post/20200101/</guid><description>&lt;p>&lt;em>안녕하세요.&lt;br>
저번 시간에 파트너스 API를 통해서 상품정보를 가져오는 것까지 했습니다.&lt;br>
오늘은 쿠팡에 있는 상품 이미지 가져오는 방법에 대해서 설명하겠습니다.&lt;br>
API를 호출해 가져온 상품정보에 접속할 수 있는 URL이 있었는데요.&lt;br>
그 URL를 통해 상품페이지로 접속해서 이미지를 가져올꺼에요. 오늘꺼 조금 깁니다&amp;hellip;&lt;/em>&lt;/p></description></item><item><title>파이썬으로 쿠팡 파트너스 API 활용하기 - 1</title><link>https://jaejin0me.github.io/post/20191230/</link><pubDate>Mon, 30 Dec 2019 07:12:52 +0900</pubDate><guid>https://jaejin0me.github.io/post/20191230/</guid><description>&lt;p>이력&lt;/p>
&lt;ul>
&lt;li>2019.12.30 포스팅&lt;/li>
&lt;li>2020.01.01 수정 - API 호출 횟수 설명 추가&lt;/li>
&lt;/ul>
&lt;p>&lt;em>안녕하세요.&lt;br>
쿠팡 파트너스 활동을 시작하면서 파이썬으로 쿠팡 파트너스 API,&lt;br>
네이버 블로그 API를 활용하여 포스팅을 자동화 하는 프로그램을 만들었습니다.&lt;br>
API 활용이 어려운건 아니지만 확실한 가이드가 될만한 포스트가 없어서 적어보려고 합니다.&lt;br>
이 포스팅 시리즈가 끝날때면 기본적인 UI를 갖춘 자동화 프로그램을 완성하는 것을 목표로 하고있습니다.&lt;/em>&lt;/p></description></item><item><title>파이썬의 subprocess 모듈을 이용해 COM 메소드 확인하기</title><link>https://jaejin0me.github.io/post/posts167/</link><pubDate>Mon, 25 Dec 2017 12:47:56 +0800</pubDate><guid>https://jaejin0me.github.io/post/posts167/</guid><description>&lt;p>&lt;a href="http://hyunmini.tistory.com/105">참고&lt;/a>&lt;/p>
&lt;p>파워쉘을 이용해 COM의 메소드를 확인할 수 있습니다. 파이썬에서 subprocess 모듈을 이용해서 파워쉘을 실행시키고 결과를 얻어오는 코드입니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">import subprocess
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if __name__ == &amp;#39;__main__&amp;#39;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clsid = &amp;#34;2E146AEF-5879-4310-BCC9-8094E3916613&amp;#34; // CLSID 예
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> powershell = subprocess.Popen([&amp;#34;powershell.exe&amp;#34;,&amp;#34;-command&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;&amp;amp;{ $clsid = New-Object Guid &amp;#39;%s&amp;#39;;$type = [Type]::GetTypeFromCLSID($clsid);$object= [Activator]::CreateInstance($ty pe);get-member -inputObject $object; }&amp;#34; % clsid]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ,stdout=subprocess.PIPE,stderr=subprocess.PIPE) #출력을 처리하기 위해 subprocess로 보냄
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">result, err = powershell.communicate() # subprocess에 있는 출력을 가져옴
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>가져온 출력을 처리하여 사용하게 되는데, IDE에서 실행하여 디버깅하면서 확이인는 경우 출력이 콘솔에 뜨지 않을 수 있습니다.&lt;br>
그때는 cmd나 파워쉘창을 열어서 실행하면 출력을 확인할 수 있습니다.&lt;/p></description></item></channel></rss>