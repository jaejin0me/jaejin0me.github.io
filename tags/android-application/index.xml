<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Android Application on Jaejin's blog</title><link>https://jaejin0me.github.io/tags/android-application/</link><description>Recent content in Android Application on Jaejin's blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><copyright>Jaejin Jang</copyright><lastBuildDate>Sun, 15 Jun 2025 01:27:00 +0900</lastBuildDate><atom:link href="https://jaejin0me.github.io/tags/android-application/index.xml" rel="self" type="application/rss+xml"/><item><title>안드로이드 앱 프로그래밍 with 코틀린 - 4. 코틀린 객체지향 프로그래밍</title><link>https://jaejin0me.github.io/post/20250615/</link><pubDate>Sun, 15 Jun 2025 01:27:00 +0900</pubDate><guid>https://jaejin0me.github.io/post/20250615/</guid><description>&lt;h2 id="4-코틀린-객체지향-프로그래밍">4. 코틀린 객체지향 프로그래밍&lt;/h2>
&lt;h3 id="41-클래스와-생성자">4.1 클래스와 생성자&lt;/h3>
&lt;ul>
&lt;li>클래스 선언만 하는 것도 가능&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kt" data-lang="kt">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">User&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>클래스 생성에 new 키워드 사용하지 않음&lt;/li>
&lt;li>주 생성자
&lt;ul>
&lt;li>클래스 선언부에 선언&lt;/li>
&lt;li>constructor 생략 가능&lt;/li>
&lt;li>init 키워드를 통해 로직 수행 가능&lt;/li>
&lt;li>유일하게 매개변수에 val, var 키워드를 사용할 수 있음 ~= 그러면 자동적으로 멤버변수가됨&lt;/li>
&lt;li>객체 생성의 메인 로직을 담당하는 편&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보조 생성자
&lt;ul>
&lt;li>본문에 constructor로 선언&lt;/li>
&lt;li>주 생성자가 있다면 무조건 호출해 주어야 함&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kt" data-lang="kt">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="42-클래스를-재사용하는-상속">4.2 클래스를 재사용하는 상속&lt;/h3>
&lt;h5 id="상속과-생성자">상속과 생성자&lt;/h5>
&lt;ul>
&lt;li>상위 클래스의 생성자를 어떻게든 호출해야한다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kt" data-lang="kt">&lt;span class="line">&lt;span class="cl">&lt;span class="k">open&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Sub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="오버라이딩">오버라이딩&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kt" data-lang="kt">&lt;span class="line">&lt;span class="cl">&lt;span class="k">open&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Super&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">open&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">someData&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">open&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">someFun&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;I am super class function: &lt;/span>&lt;span class="si">$someData&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Sub&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Super&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">override&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">someData&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">20&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">someFun&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;I am sub class function: &lt;/span>&lt;span class="si">$someData&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">obj&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Sub&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">someFun&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 출력
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// I am sub class function: 20
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="접급-제한자">접급 제한자&lt;/h4>
&lt;p>&lt;img loading="lazy" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSJ99w33l0daUMH7C8akT6XGxUWuE5FZjjcAg&amp;amp;s" alt="" />
&lt;/p></description></item><item><title>안드로이드 앱 프로그래밍 with 코틀린 - 3. 코틀린 시작하기</title><link>https://jaejin0me.github.io/post/20250613/</link><pubDate>Fri, 13 Jun 2025 23:04:00 +0900</pubDate><guid>https://jaejin0me.github.io/post/20250613/</guid><description>&lt;h2 id="3-코틀린-시작하기">3. 코틀린 시작하기&lt;/h2>
&lt;h3 id="31-코틀린-언어-소개">3.1 코틀린 언어 소개&lt;/h3>
&lt;ul>
&lt;li>표현력과 간결함&lt;/li>
&lt;li>안전한 코드
&lt;ul>
&lt;li>nullable, not null&lt;/li>
&lt;li>타입뒤에 ?로 표시&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자바와의 상호운용성&lt;/li>
&lt;li>구조화된 동시성
&lt;ul>
&lt;li>coroutine&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="코틀린-파일-구성">코틀린 파일 구성&lt;/h4>
&lt;ul>
&lt;li>package: 컴파일시 만들어지는 클래스 파일의 경로
&lt;ul>
&lt;li>같은 package를 사용하면 import 없이 사용가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자바와 달리 파일명도 클래스명과 일치할 필요 없음&lt;/li>
&lt;/ul>
&lt;h3 id="32-변수와-함수">3.2 변수와 함수&lt;/h3>
&lt;ul>
&lt;li>var말고 val 이라는 키워드도 존재함. 값 할당 후 수정 불가&lt;/li>
&lt;li>타입지정 가능&lt;/li>
&lt;li>최상위에 선언한 변수나 클래스의 멤버 변수는 선언과 동시에 초기화 해야함&lt;/li>
&lt;li>초기화 지연 가능
&lt;ul>
&lt;li>lateinit: var 변수에만 가능. 숫자+Boolean 타입에는 불가&lt;/li>
&lt;li>lazy&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kt" data-lang="kt">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">data4&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">lazy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;in lazy...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>코틀린의 모든 변수는 객체&lt;/li>
&lt;li>삼중 따옴표에는 trimIndent()가 자동으로 적용됨&lt;/li>
&lt;li>Unit 타입: 반환문이 없는 함수에 사용&lt;/li>
&lt;li>Nothing: null이나 예외를 반환하는 함수&lt;/li>
&lt;/ul>
&lt;h4 id="함수-선언하기">함수 선언하기&lt;/h4>
&lt;ul>
&lt;li>함수의 매개변수는 val 키워드가 자동 적용&lt;/li>
&lt;li>명명된 매개변수 지원&lt;/li>
&lt;/ul>
&lt;h4 id="컬렉션-타입">컬렉션 타입&lt;/h4>
&lt;ul>
&lt;li>기초 타입 Array도 별도로 존재&lt;/li>
&lt;/ul>
&lt;h3 id="33-조건문과-반복문">3.3 조건문과 반복문&lt;/h3>
&lt;ul>
&lt;li>if-else를 표현식(결과값을 반환하는 계산식)으로도 사용 가능&lt;/li>
&lt;li>when 이라는 조건문도 존재. 마찬가지로 표현식으로 사용 가능&lt;/li>
&lt;li>for, while이 있고, for 문에서 보통 범위 연산자 in 사용&lt;/li>
&lt;/ul></description></item><item><title>안드로이드 앱 프로그래밍 with 코틀린 - 2. 안드로이드 앱의 기본 구조</title><link>https://jaejin0me.github.io/post/20250612/</link><pubDate>Thu, 12 Jun 2025 23:26:00 +0900</pubDate><guid>https://jaejin0me.github.io/post/20250612/</guid><description>&lt;h2 id="2-안드로이드-앱이-기본-구조">2. 안드로이드 앱이 기본 구조&lt;/h2>
&lt;h3 id="21-안드로이드-소개">2.1 안드로이드 소개&lt;/h3>
&lt;ul>
&lt;li>안드로이드 런타임(Dalvik &amp;ndash; (안드로이드 버전 5.0) &amp;ndash;&amp;gt; ART(Android RunTime))
&lt;ul>
&lt;li>dex파일(앱파일) 해석하여 실행
&lt;img loading="lazy" src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F308397%2F6466514a-30f9-f561-ff35-d61d55ab3bbf.png?ixlib=rb-4.0.0&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=7cedbd5436c52312beffc107c817264b" alt="" />
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="22-안드로이드-앱-개발의-특징">2.2 안드로이드 앱 개발의 특징&lt;/h3>
&lt;ul>
&lt;li>생명주기를 안드로이드에서 관리하면 컴포넌트, 개발자가 관리하면 일반 클래스임
&lt;img loading="lazy" src="https://blog.kakaocdn.net/dn/cduDnu/btrmGgPet7i/5BsTVrJHenj4KdWqKy0RR0/img.png" alt="" />
&lt;/li>
&lt;li>안드로이드 컴포넌트는 4종류
&lt;ul>
&lt;li>액티비티: 화면구성(화면 1개 담당)&lt;/li>
&lt;li>서비스: 백그라운드&lt;/li>
&lt;li>콘텐츠 프로바이더: 앱간 데이터 공유&lt;/li>
&lt;li>브로드캐스트 리시버: 시스템 이벤트 수신
&lt;img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FPK7FT%2FbtrmKiZSesd%2Fnlkq9YA1P61gdr7QLtoShk%2Fimg.png" alt="" />
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>애플리케이션 라이브러리를 사용할 수 있음&lt;/li>
&lt;li>리소스 xml 파일로 등록하여 사용&lt;/li>
&lt;/ul>
&lt;h3 id="23-앱-구성-파일-분석">2.3 앱 구성 파일 분석&lt;/h3>
&lt;ul>
&lt;li>하나의 모듈 ~= 하나의 앱&lt;/li>
&lt;/ul>
&lt;h4 id="buildgradlekts-빌드-설정-파일">build.gradle.kts (빌드 설정 파일)&lt;/h4>
&lt;ul>
&lt;li>gradle: 안드로이드 빌드 도구&lt;/li>
&lt;/ul>
&lt;h4 id="androidmanifestxml-메인-환경-파일">AndroidManifest.xml (메인 환경 파일)&lt;/h4>
&lt;ul>
&lt;li>속성값이 @로 시작하면 리소스&lt;/li>
&lt;li>시스템은 매니페스트에 있는 대로 앱을 실행 ~= 컴포넌트를 매니페스트에 등록해야 한다. (Activity, Service, Receiver, Provider, name 속성은 필수)&lt;/li>
&lt;li>&lt;!-- raw HTML omitted --> 태그는 액션별 실행 정의&lt;/li>
&lt;/ul>
&lt;h4 id="res-폴더-리소스">res 폴더 (리소스)&lt;/h4>
&lt;ul>
&lt;li>drawable: 이미지&lt;/li>
&lt;li>layout: UI 구성에 필요한 xml&lt;/li>
&lt;li>mipmap: 앱 아이콘&lt;/li>
&lt;li>values: 값 리소스&lt;/li>
&lt;li>R.java 파일에 상수 변수로 자동등록&lt;/li>
&lt;li>지정된 방식으로만 사용됨&lt;/li>
&lt;/ul>
&lt;h4 id="activity_mainxml-기본-레이아웃-파일">activity_main.xml (기본 레이아웃 파일)&lt;/h4>
&lt;h4 id="mainactivitykt-메인-액티비티">MainActivity.kt (메인 액티비티)&lt;/h4>
&lt;ul>
&lt;li>MainActivity 클래스가 실행되면 onCreate() 호출됨&lt;/li>
&lt;/ul></description></item></channel></rss>